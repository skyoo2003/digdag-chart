## String to partially override influxdb.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override influxdb.fullname template
##
# fullnameOverride:

## Optionally specify an array of imagePullSecrets.
## Secrets must be manually created in the namespace.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# imagePullSecrets:
# - myRegistryKeySecretName

## Digdag image
## ref: https://hub.docker.com/r/szyn/docker-digdag/tags
##
image:
  repository: docker.io/szyn/docker-digdag
  tag: 0.9.42
  ## Specify a imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  args:
    - "server"
    - "--config"
    - "/opt/etc/digdag/server.properties"

## Number of Digdag replicas to deploy
##
replicaCount: 3

## Update strategy, can be set to RollingUpdate or OnDelete by default.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
##
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 34%
    maxSurge: 25%

## Duration in seconds a Digdag pod needs to terminate gracefully.
##
terminationGracePeriodSeconds: 30

## Array to add volumes
##
volumes: []

## Array to add extra volume mounts
##
volumeMounts: []

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## Pod Security Context.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: false
  fsGroup: 1000

## Pod containers' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
##
securityContext:
  enabled: false
  # capabilities:
  #   drop:
  #   - ALL
  runAsNonRoot: true
  runAsUser: 1000

## Service account for Digdag to use.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Digdag Service
##
service:
  enabled: true

  ## Digdag service type
  ##
  type: ClusterIP

  ## Digdag service port number
  ##
  port: 80

  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort: 30000

  ## Set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  # loadBalancerIP:
  # loadBalancerSourceRanges:
  # - 10.10.10.0/24

  ## Provide any additional annotations which may be required. This can be used to set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  annotations: {}

jmx:
  enabled: false
  port: 8999

ingress:
  enabled: false

  ## For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  ## See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx

  labels: {}

  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

  hosts: []
  # - host: digdag.local
  #  paths: []
  #  - path: /

  tls: []
  # - secretName: digdag-ingress-tls
  #   hosts:
  #     - digdag.local

resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 1024Mi
  # requests:
  #   cpu: 500m
  #   memory: 1024Mi

livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 6

readinessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 6

configuration: |-
  server.bind=0.0.0.0
  server.port=65432
  {{- if .Values.jmx.enabled }}
  server.jmx.port={{ .Values.jmx.port }}
  {{- end }}
  database.type=postgresql
  database.maximumPoolSize=64
  database.user=digdag
  database.password=digdag
  database.host=digdag-postgresql-ha-pgpool
  database.port=5432
  database.database=digdag_db
  database.ssl=false
  digdag.secret-encryption-key=YZ55MTuieXRlc3AocmFzZQ==
  executor.task_ttl=10d
  executor.attempt_ttl=30d

metrics:
  enabled: false

  image:
    repository: docker.io/sscaling/jmx-prometheus-exporter
    tag: 0.12.0
    pullPolicy: IfNotPresent

  ## JMX exporter configuration
  ## See https://github.com/prometheus/jmx_exporter#configuration
  #
  configuration: |-
    startDelaySeconds: 0
    hostPort: 127.0.0.1:{{ .Values.jmx.port }}
    ssl: false
    lowercaseOutputName: false
    rules:
    - pattern: "com.zaxxer.hikari<type=Pool \\(.+\\)><>(\\w+): (\\d+)"
      name: digdag_hikari_$1
      type: GAUGE
      value: $2
      help: "Digdag HikraiCP $1 $2"
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  serviceMonitor:
    ## If true, a ServiceMonitor CRD is created for a prometheus operator
    ## https://github.com/coreos/prometheus-operator
    ##
    enabled: false
    # Namespace for a ServiceMonitor resource (defaults to use the namespace this chart is deployed to)
    # namespace: monitoring
    interval: 30s
    scrapeTimeout: 30s
    # labels: {}
    #   prometheus: kube-prometheus
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
    relabelings: []
    metricRelabelings: []

  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

  readinessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

postgresql-ha:
  postgresql:
    initdbScripts:
      create-db.sql: |
        CREATE USER digdag WITH PASSWORD 'digdag' SUPERUSER;
        CREATE DATABASE digdag_db OWNER digdag;
    maxConnections: 1024
    replicaCount: 3

  pgpool:
    maxPool: 1
    numInitChildren: 1024
    logConnections: true
    clientIdleLimit: 0
    childLifeTime: 0
    customUsers:
      usernames: 'digdag'
      passwords: 'digdag'
    replicaCount: 2
    configuration: |
      debug_level=5
      child_life_time=0
      client_idle_limit=0
      connection_cache=false
      num_init_children=1024
      max_pool=1

  persistence:
    enabled: true
    size: 50Gi
